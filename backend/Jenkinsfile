node {
    properties([
        pipelineTriggers([pollSCM('H/2 * * * *')]),
        disableConcurrentBuilds()
    ])

    stage('1') {
        echo "Run before get source"
    }

    stage('Get Source') {
        checkout([
           $class: 'GitSCM',
           branches: [[name: '*/master']],
           doGenerateSubmoduleConfigurations: false,
           extensions: [
               [$class: 'DisableRemotePoll'],
               [$class: 'CleanBeforeCheckout'],
               [$class: 'PathRestriction', excludedRegions: '', includedRegions: '^backend/.*']],
               submoduleCfg: [],
               userRemoteConfigs: [[credentialsId: 'mykola-github-key', url: "git@github.com:mshenhera/test-jenkins-pipeline.git"]]
       ])

      def changeLogSets = currentBuild.changeSets
      for (int i = 0; i < changeLogSets.size(); i++) {
          def entries = changeLogSets[i].items
          for (int j = 0; j < entries.length; j++) {
              def entry = entries[j]
              echo "${entry.commitId} by ${entry.author} on ${new Date(entry.timestamp)}: ${entry.msg}"
              def files = new ArrayList(entry.affectedFiles)
              for (int k = 0; k < files.size(); k++) {
                  def file = files[k]
                  echo "  ${file.editType.name} ${file.path}"
              }
          }
      }
    }

    stage('2') {
        echo "Run after get source"
    }
}
