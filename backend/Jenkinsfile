def abortBuildIfTriggeredByRestrictedPath() {
    def changeLogSets = currentBuild.changeSets
    def validChangeDetected = false
    outerloop:
    for (int i = 0; i < changeLogSets.size(); i++) {
        def entries = changeLogSets[i].items
        for (int j = 0; j < entries.length; j++) {
            def entry = entries[j]
            echo "${entry.commitId} by ${entry.author} on ${new Date(entry.timestamp)}: ${entry.msg}"
            def files = new ArrayList(entry.affectedFiles)
            for (int k = 0; k < files.size(); k++) {
                def file = files[k]
                if(file.path.startsWith("backend/")){
                    validChangeDetected = true
                    println "[INFO] Found commit to the file: ${file.path} (file operations: ${file.editType.name})"
                    break outerloop
                }
            }
        }
    }

    // We are building if there are some walid changes or if there are no changes(so the build was triggered intentionally or it is the first run.)
    if(!validChangeDetected && changeLogSets.size() != 0) {
        currentBuild.result = 'NOT_BUILT'
        error("Stopping to prevent not needed build. No changes to backend folder")
    }

    // We are building if there no any changes.
    // Looks like manual run from UI
    if(changeLogSets.size() == 0) {
        println "[INFO] No changes found. Continue the buid"
    }
}

node {
    properties([
        pipelineTriggers([pollSCM('H/2 * * * *')]),
        disableConcurrentBuilds()
    ])

    stage('1') {
        echo "Run before get source"
    }

    stage('Get Source') {
        checkout([
           $class: 'GitSCM',
           branches: [[name: '*/master']],
           doGenerateSubmoduleConfigurations: false,
           extensions: [
               [$class: 'DisableRemotePoll'],
               [$class: 'CleanBeforeCheckout'],
               [$class: 'PathRestriction', excludedRegions: '', includedRegions: '^backend/.*']],
               submoduleCfg: [],
               userRemoteConfigs: [[credentialsId: 'mykola-github-key', url: "git@github.com:mshenhera/test-jenkins-pipeline.git"]]
       ])

       abortBuildIfTriggeredByRestrictedPath()
    }

    stage('2') {
        echo "Run after get source"
    }
}
